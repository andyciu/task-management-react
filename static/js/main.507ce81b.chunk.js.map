{"version":3,"sources":["layout/sidebar/SubMenu.tsx","pages/home/HomePage.tsx","utils/http-common.ts","apis/labels.tsx","pages/labels/CreateLabel.tsx","pages/labels/EditLabel.tsx","components/custom-sort-caret/CustomSortCaret.tsx","pages/labels/DeleteLabel.tsx","store/hook.ts","store/labels/labelsSlice.ts","utils/const.ts","pages/labels/LabelsPage.tsx","apis/tasks.tsx","utils/dateFormat.ts","pages/tasks/CreateTask.tsx","pages/tasks/DeleteTask.tsx","pages/tasks/EditTask.tsx","router/config.tsx","pages/tasks/TasksPage.tsx","router/private-route.tsx","apis/auth.tsx","apis/user.tsx","store/user/userSlice.ts","components/login/LoginModal.tsx","components/login/NickNameText.tsx","layout/content/Navbar.tsx","layout/content/Content.tsx","layout/sidebar/SideBar.tsx","layout/MainPage.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["SubMenu","props","title","icon","items","useState","collapsed","setSollapsed","CustomToggle","eventKey","onclick","children","keystr","decoratedOnClick","useAccordionButton","Nav","Link","className","onClick","Item","classNames","open","Accordion","faCaretDown","faCaretUp","Collapse","map","item","as","to","path","text","HomePage","axios","create","baseURL","process","REACT_APP_URL","headers","Authorization","localStorage","getItem","AxiosAuth","GetParamsParse","values","resultstr","key","value","Array","isArray","subvalue","concat","ApiLabelsList","a","http","get","response","data","ApiLabelsCreate","post","ApiLabelsEdit","ApiLabelsDelete","CreateLabel","onFinish","show","setShow","isClick","setIsClick","validated","setValidated","onSummit","e","form","currentTarget","preventDefault","checkValidity","stopPropagation","formData","FormData","target","formDataObj","Object","fromEntries","entries","reqData","result","Button","variant","Offcanvas","onHide","placement","Header","closeButton","Title","Body","Form","onSubmit","noValidate","Group","controlId","Label","Control","type","placeholder","name","required","Feedback","disabled","Spinner","animation","size","role","aria-hidden","EditLabel","id","defaultValue","CustomSortCaret","order","column","faAngleUp","faAngleDown","DeleteLabel","handleClose","handleDelete","Modal","Footer","useAppDispatch","useDispatch","useAppSelector","useSelector","labelsSlice","createSlice","initialState","reducers","writeData","state","action","payload","InitLabelsSliceData","dispatch","content","actions","ResponseCode","LabelsPage","dataSourse","setDataSourse","setLoading","showAlert","setShowAlert","alertVariant","setAlertVariant","alertText","setAlertText","GetLabelsList","columns","dataField","sort","style","width","sortCaret","align","formatter","cell","row","rowIndex","code","useEffect","Container","Alert","Stack","direction","gap","bootstrap4","keyField","noDataIndication","Placeholder","xs","pagination","paginationFactory","defaultSorted","ApiTasksList","ApiTasksCreate","ApiTasksEdit","ApiTasksDelete","toDateString","length","moment","format","CreateTask","labelsData","labels","endtimeisInvalid","setEndtimeisInvalid","labelsValue","setLabelsValue","start_time","Date","toISOString","undefined","end_time","getTime","i","priority","isInvalid","Select","aria-label","options","isMulti","closeMenuOnSelect","getOptionLabel","getOptionValue","toString","onChange","newData","assign","DeleteTask","EditTask","InitLabelsData","forEach","k","find","element","push","description","PrivateRouteConfig","exact","component","GetTasksList","badgestr","badgecolor","Badge","pill","bg","RouteCompoment","RouteContent","elements","PublicRouteConfig","route","subElements","routes","routesub","subCompoment","totalCompoment","RouteSideBar","faCopy","SubMenuCompoment","ApiAuthLogin","ApiUserGetNickName","userSlice","isLogin","nickname","setLogin","setNickName","InitUserNickNameData","LoginModal","modalShow","setModalShow","setHide","setItem","token","decodedToken","jwt_decode","currentDate","exp","removeItem","IsLogin","aria-labelledby","centered","NickNameText","nickName","user","Navbar","Text","NavbarCustom","toggle","expand","Brand","faAlignLeft","Toggle","aria-controls","Content","isOpen","fluid","Row","Col","SideBar","color","faTimes","pull","MainPage","setIsOpen","previousWidth","setPreviousWidth","updateWidth","window","innerWidth","isMobile","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","labelsReducer","userReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.507ce81b.chunk.js","sourcesContent":["import {\n  faCaretDown,\n  faCaretUp,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport { Accordion, Nav, useAccordionButton } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { IRoute } from \"../../router/config\";\n\ninterface IProps {\n  title: string;\n  icon: any;\n  items: IRoute[];\n}\n\nconst SubMenu = (props: IProps) => {\n  const { title, icon, items } = props;\n  const [collapsed, setSollapsed] = useState(true);\n\n  const toggleNavbar = () => {\n    setSollapsed(!collapsed);\n  };\n\n  interface ICustomToggleProps {\n    eventKey: string;\n    onclick?: Function;\n    children?: React.ReactNode;\n    keystr: string;\n  }\n\n  const CustomToggle: React.FC<ICustomToggleProps> = (\n    props: ICustomToggleProps\n  ) => {\n    const { eventKey, onclick, children, keystr } = props;\n    const decoratedOnClick = useAccordionButton(eventKey, () => {\n      if (onclick) {\n        onclick();\n      }\n    });\n\n    return (\n      <Nav.Link\n        className=\"sidebar-link\"\n        key={\"link\" + keystr}\n        onClick={decoratedOnClick}\n      >\n        {children}\n      </Nav.Link>\n    );\n  };\n\n  return (\n    <Nav.Item className={classNames({ open: !collapsed })}>\n      <Accordion>\n        <CustomToggle eventKey=\"0\" keystr={title} onclick={toggleNavbar}>\n          <FontAwesomeIcon icon={icon} className=\"mr-2\" />\n          &nbsp;{title}&nbsp;\n          <FontAwesomeIcon\n            icon={collapsed ? faCaretDown : faCaretUp}\n            className=\"float-right\"\n          />\n        </CustomToggle>\n\n        <Accordion.Collapse eventKey=\"0\">\n          <nav className=\"nav flex-column\">\n            {items.map((item) => (\n              <Nav.Link\n                as={Link}\n                to={item.path}\n                key={item.path}\n                className=\"sidebar-link\"\n              >\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{item.text}\n              </Nav.Link>\n            ))}\n          </nav>\n        </Accordion.Collapse>\n      </Accordion>\n    </Nav.Item>\n  );\n};\n\nexport default SubMenu;\n","const HomePage = () => {\n  return <h2>Home Page</h2>;\n};\n\nexport default HomePage;\n","import axios from \"axios\";\nimport jwt_decode, { JwtPayload } from \"jwt-decode\";\n\nexport default () =>\n  axios.create({\n    baseURL: process.env.REACT_APP_URL + \"/apis\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n    },\n  });\n\nconst AxiosAuth = axios.create({\n  baseURL: process.env.REACT_APP_URL + \"/auth\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\nconst GetParamsParse = (path: string, values?: any) => {\n  if (values) {\n    let resultstr = \"?\";\n    for (let key in values) {\n      let value = values[key];\n      if (Array.isArray(value)) {\n        for (let subvalue in value) {\n          resultstr = resultstr.concat(key, \"=\", subvalue, \"&\");\n        }\n      } else {\n        resultstr = resultstr.concat(key, \"=\", value, \"&\");\n      }\n    }\n    return path + resultstr;\n  } else {\n    return path;\n  }\n};\n\nconst IsLogin = () => {\n  let token = localStorage.getItem(\"token\");\n  if (!token) return false;\n\n  let decodedToken = jwt_decode<JwtPayload>(token);\n  let currentDate = new Date();\n\n  // JWT exp is in seconds\n  if (decodedToken.exp && decodedToken.exp * 1000 >= currentDate.getTime()) {\n    return true;\n  } else {\n    localStorage.removeItem(\"token\");\n    return false;\n  }\n};\n\nexport { GetParamsParse, IsLogin, AxiosAuth };\n","import { AxiosResponse } from \"axios\";\nimport { CommonRes } from \"../interface/common\";\nimport {\n  LabelsCreateReq,\n  LabelsDeleteReq,\n  LabelsEditReq,\n  LabelsListRes,\n} from \"../interface/labels\";\nimport http from \"../utils/http-common\";\n\nconst ApiLabelsList = async () => {\n  const response = await http().get<CommonRes<LabelsListRes[]>>(\"/labels/list\");\n  return response.data;\n};\n\nconst ApiLabelsCreate = async (value: LabelsCreateReq) => {\n  const response = await http().post<\n    LabelsCreateReq,\n    AxiosResponse<CommonRes<number>>\n  >(\"/labels/create\", value);\n  return response.data;\n};\n\nconst ApiLabelsEdit = async (value: LabelsEditReq) => {\n  const response = await http().post<\n    LabelsEditReq,\n    AxiosResponse<CommonRes<null>>\n  >(\"/labels/update\", value);\n  return response.data;\n};\n\nconst ApiLabelsDelete = async (value: LabelsDeleteReq) => {\n  const response = await http().post<\n    LabelsDeleteReq,\n    AxiosResponse<CommonRes<null>>\n  >(\"/labels/deleteL\", value);\n  return response.data;\n};\n\nexport { ApiLabelsList, ApiLabelsCreate, ApiLabelsEdit, ApiLabelsDelete };\n","import { useEffect, useState } from \"react\";\nimport { Button, Form, Offcanvas, Spinner } from \"react-bootstrap\";\nimport { ApiLabelsCreate } from \"../../apis/labels\";\nimport { CommonRes } from \"../../interface/common\";\nimport { LabelsCreateReq } from \"../../interface/labels\";\n\ninterface IProp {\n  onFinish?: (value: CommonRes<any>) => void;\n}\n\nconst CreateLabel = (props: IProp) => {\n  const { onFinish } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n  const [validated, setValidated] = useState(false);\n\n  const onSummit = async (e: any) => {\n    setIsClick(true);\n    setValidated(true);\n\n    const form = e.currentTarget;\n    e.preventDefault();\n\n    if (form.checkValidity() === false) {\n      setIsClick(false);\n      e.stopPropagation();\n      return;\n    }\n\n    const formData = new FormData(e.target),\n      formDataObj = Object.fromEntries(formData.entries());\n\n    const reqData = formDataObj as unknown as LabelsCreateReq;\n    const result = await ApiLabelsCreate(reqData);\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          setIsClick(false);\n          setValidated(false);\n          setShow(true);\n        }}\n      >\n        Create\n      </Button>\n\n      <Offcanvas show={show} onHide={() => setShow(false)} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Create Label</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <Form onSubmit={onSummit} noValidate validated={validated}>\n            <Form.Group className=\"mb-3\" controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name\"\n                name=\"name\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please input label name.\n              </Form.Control.Feedback>\n            </Form.Group>\n            {isClick ? (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n            ) : (\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            )}\n          </Form>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n};\n\nexport default CreateLabel;\n","import { useState } from \"react\";\nimport { Button, Form, Offcanvas, Spinner } from \"react-bootstrap\";\nimport { ApiLabelsEdit } from \"../../apis/labels\";\nimport { CommonRes } from \"../../interface/common\";\nimport { LabelsEditReq } from \"../../interface/labels\";\n\ninterface IProp {\n  id: number;\n  name: string;\n  onFinish?: (value: CommonRes<any>) => void;\n}\n\nconst EditLabel = (props: IProp) => {\n  const { id, name, onFinish } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n  const [validated, setValidated] = useState(false);\n\n  const onSummit = async (e: any) => {\n    setIsClick(true);\n    setValidated(true);\n\n    const form = e.currentTarget;\n    e.preventDefault();\n\n    if (form.checkValidity() === false) {\n      setIsClick(false);\n      e.stopPropagation();\n      return;\n    }\n\n    const formData = new FormData(e.target),\n      formDataObj = Object.fromEntries(formData.entries());\n\n    const reqData: LabelsEditReq = {\n      id: id,\n      name: formDataObj.name as string,\n    };\n\n    const result = await ApiLabelsEdit(reqData);\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          setIsClick(false);\n          setValidated(false);\n          setShow(true);\n        }}\n      >\n        Edit\n      </Button>\n\n      <Offcanvas show={show} onHide={() => setShow(false)} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Edit Label</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <Form onSubmit={onSummit} noValidate validated={validated}>\n            <Form.Group className=\"mb-3\" controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name\"\n                name=\"name\"\n                defaultValue={name}\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please input label name.\n              </Form.Control.Feedback>\n            </Form.Group>\n            {isClick ? (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n            ) : (\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            )}\n          </Form>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n};\n\nexport default EditLabel;\n","import { faAngleUp, faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst CustomSortCaret = (order: \"asc\" | \"desc\" | undefined, column: any) => {\n    if (!order)\n      return (\n        <span>\n          &nbsp;&nbsp;\n          <FontAwesomeIcon icon={faAngleUp} />\n          &nbsp;\n          <FontAwesomeIcon icon={faAngleDown} />\n        </span>\n      );\n    else if (order === \"asc\")\n      return (\n        <span>\n          &nbsp;&nbsp;\n          <FontAwesomeIcon icon={faAngleUp} />\n        </span>\n      );\n    else if (order === \"desc\")\n      return (\n        <span>\n          &nbsp;&nbsp;\n          <FontAwesomeIcon icon={faAngleDown} />\n        </span>\n      );\n    return null;\n  };\n\nexport default CustomSortCaret;","import { useState } from \"react\";\nimport { Button, Modal, Spinner } from \"react-bootstrap\";\nimport { ApiLabelsDelete } from \"../../apis/labels\";\nimport { CommonRes } from \"../../interface/common\";\n\ninterface IProp {\n  id: number;\n  onFinish?: (value: CommonRes<any>) => void;\n}\n\nconst DeleteLabel = (props: IProp) => {\n  const { id, onFinish } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setIsClick(false);\n    setShow(true);\n  };\n\n  const handleDelete = async () => {\n    setIsClick(true);\n    const result = await ApiLabelsDelete({ id: id });\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  return (\n    <>\n      <Button variant=\"danger\" onClick={handleShow}>\n        Delete\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header>\n          <Modal.Title>確認刪除</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>你確認要刪除這項紀錄嗎?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose} disabled={isClick}>\n            Close\n          </Button>\n          {isClick ? (\n            <Button variant=\"danger\" disabled>\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n              <span className=\"visually-hidden\">Loading...</span>\n            </Button>\n          ) : (\n            <Button variant=\"danger\" onClick={handleDelete}>\n              Delete\n            </Button>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default DeleteLabel;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ApiLabelsList } from \"../../apis/labels\";\nimport { LabelsListRes } from \"../../interface/labels\";\n\ninterface LabelsState {\n  value: LabelsListRes[];\n}\n\nconst initialState: LabelsState = {\n  value: [],\n};\n\nexport const labelsSlice = createSlice({\n  name: \"labels\",\n  initialState,\n  reducers: {\n    writeData: (state, action: PayloadAction<LabelsListRes[]>) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nconst InitLabelsSliceData = async (dispatch: Function) => {\n  const data = await ApiLabelsList();\n  dispatch(writeData(data.content));\n};\n\n// Action creators are generated for each case reducer function\nexport const { writeData } = labelsSlice.actions;\nexport { InitLabelsSliceData };\nexport default labelsSlice.reducer;\n","const ResponseCode = {\n  OK: \"00\",\n  Error: \"99\",\n};\n\nexport { ResponseCode };\n","import { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Container,\n  Placeholder,\n  Stack,\n} from \"react-bootstrap\";\nimport BootstrapTable, {\n  ColumnDescription,\n  SortOrder,\n} from \"react-bootstrap-table-next\";\nimport { ApiLabelsList } from \"../../apis/labels\";\nimport { LabelsListRes } from \"../../interface/labels\";\nimport CreateLabel from \"./CreateLabel\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport EditLabel from \"./EditLabel\";\nimport CustomSortCaret from \"../../components/custom-sort-caret/CustomSortCaret\";\nimport DeleteLabel from \"./DeleteLabel\";\nimport { useAppDispatch } from \"../../store/hook\";\nimport { writeData } from \"../../store/labels/labelsSlice\";\nimport { ResponseCode } from \"../../utils/const\";\n\nconst LabelsPage = () => {\n  const dispatch = useAppDispatch();\n  const [dataSourse, setDataSourse] = useState<LabelsListRes[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertVariant, setAlertVariant] = useState(\"\");\n  const [alertText, setAlertText] = useState(\"\");\n\n  const GetLabelsList = async () => {\n    setLoading(true);\n    const data = await ApiLabelsList();\n    setDataSourse(data.content);\n    dispatch(writeData(data.content));\n    setLoading(false);\n  };\n\n  const columns: ColumnDescription[] = [\n    {\n      dataField: \"id\",\n      text: \"ID\",\n      sort: true,\n      style: { width: \"80px\" },\n      sortCaret: CustomSortCaret,\n    },\n    {\n      dataField: \"name\",\n      text: \"Name\",\n      sort: true,\n      sortCaret: CustomSortCaret,\n    },\n    {\n      dataField: \"_action\",\n      text: \"Action\",\n      style: { width: \"160px\" },\n      align: \"center\",\n      formatter: (cell, row, rowIndex) => {\n        return (\n          <>\n            <EditLabel\n              onFinish={(result) => {\n                setShowAlert(false);\n                if (result.code == ResponseCode.OK) {\n                  setAlertVariant(\"success\");\n                  setAlertText(\"修改成功\");\n                } else {\n                  setAlertVariant(\"danger\");\n                  setAlertText(\"修改失敗\");\n                }\n                setShowAlert(true);\n                setDataSourse([]);\n                GetLabelsList();\n              }}\n              {...row}\n            />\n            &nbsp;\n            <DeleteLabel\n              id={row.id}\n              onFinish={(result) => {\n                setShowAlert(false);\n                if (result.code == ResponseCode.OK) {\n                  setAlertVariant(\"success\");\n                  setAlertText(\"刪除成功\");\n                } else {\n                  setAlertVariant(\"danger\");\n                  setAlertText(\"刪除失敗\");\n                }\n                setShowAlert(true);\n                setDataSourse([]);\n                GetLabelsList();\n              }}\n            />\n          </>\n        );\n      },\n    },\n  ];\n\n  const defaultSorted: [{ dataField: any; order: SortOrder }] = [\n    {\n      dataField: \"id\",\n      order: \"asc\",\n    },\n  ];\n\n  useEffect(() => {\n    GetLabelsList();\n  }, []);\n\n  return (\n    <Container>\n      {showAlert ? (\n        <Alert key={\"alertkey\"} variant={alertVariant}>\n          {alertText}\n        </Alert>\n      ) : null}\n\n      <Stack direction=\"horizontal\" gap={2}>\n        <h2>Labels</h2>\n        <div className=\"ms-auto\">\n          <CreateLabel\n            onFinish={(result) => {\n              setShowAlert(false);\n              if (result.code == ResponseCode.OK) {\n                setAlertVariant(\"success\");\n                setAlertText(\"新增成功\");\n              } else {\n                setAlertVariant(\"danger\");\n                setAlertText(\"新增失敗\");\n              }\n              setShowAlert(true);\n              setDataSourse([]);\n              GetLabelsList();\n            }}\n          />\n        </div>\n      </Stack>\n      <BootstrapTable\n        bootstrap4\n        keyField=\"id\"\n        data={dataSourse}\n        columns={columns}\n        noDataIndication={() => (\n          <Placeholder as=\"p\" animation=\"glow\">\n            <Placeholder xs={12} />\n            <Placeholder xs={12} />\n            <Placeholder xs={12} />\n          </Placeholder>\n        )}\n        pagination={paginationFactory({})}\n        defaultSorted={defaultSorted}\n      />\n    </Container>\n  );\n};\n\nexport default LabelsPage;\n","import { AxiosResponse } from \"axios\";\nimport { CommonRes } from \"../interface/common\";\nimport {\n  TasksCreateReq,\n  TasksDeleteReq,\n  TasksEditReq,\n  TasksListReq,\n  TasksListRes,\n} from \"../interface/tasks\";\nimport http, { GetParamsParse } from \"../utils/http-common\";\n\nconst ApiTasksList = async (value?: TasksListReq) => {\n  const response = await http().get<CommonRes<TasksListRes[]>>(\n    GetParamsParse(\"/tasks/list\", value)\n  );\n  return response.data;\n};\n\nconst ApiTasksCreate = async (value: TasksCreateReq) => {\n  const response = await http().post<\n    TasksCreateReq,\n    AxiosResponse<CommonRes<number>>\n  >(\"/tasks/create\", value);\n  return response.data;\n};\n\nconst ApiTasksEdit = async (value: TasksEditReq) => {\n  const response = await http().post<\n    TasksEditReq,\n    AxiosResponse<CommonRes<null>>\n  >(\"/tasks/update\", value);\n  return response.data;\n};\n\nconst ApiTasksDelete = async (value: TasksDeleteReq) => {\n  const response = await http().post<\n    TasksDeleteReq,\n    AxiosResponse<CommonRes<null>>\n  >(\"/tasks/deleteL\", value);\n  return response.data;\n};\n\nexport { ApiTasksList, ApiTasksCreate, ApiTasksEdit, ApiTasksDelete };\n","import * as moment from \"moment\";\n\nconst toDateString = (value: string) => {\n  if (value && value.length > 0) {\n    const m = moment.utc(value);\n    return m.format(\"YYYY-MM-DD\");\n  } else {\n    return \"\";\n  }\n};\n\nexport { toDateString };\n","import { useEffect, useState } from \"react\";\nimport { Button, Form, Offcanvas, Spinner } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport { ApiTasksCreate } from \"../../apis/tasks\";\nimport { CommonRes } from \"../../interface/common\";\nimport { LabelsListRes } from \"../../interface/labels\";\nimport { TasksCreateReq } from \"../../interface/tasks\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hook\";\nimport { InitLabelsSliceData } from \"../../store/labels/labelsSlice\";\n\ninterface IProp {\n  onFinish?: (value: CommonRes<any>) => void;\n}\n\nconst CreateTask = (props: IProp) => {\n  const dispatch = useAppDispatch();\n  const labelsData = useAppSelector((state) => state.labels.value);\n  const { onFinish } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const [endtimeisInvalid, setEndtimeisInvalid] = useState(false);\n  const [labelsValue, setLabelsValue] = useState<LabelsListRes[]>([]);\n\n  const onSummit = async (e: any) => {\n    setIsClick(true);\n    setEndtimeisInvalid(false);\n\n    const form = e.currentTarget;\n    e.preventDefault();\n    setValidated(true);\n\n    if (form.checkValidity() === false) {\n      setIsClick(false);\n      e.stopPropagation();\n      return;\n    }\n\n    const formData = new FormData(e.target),\n      formDataObj = Object.fromEntries(formData.entries());\n\n    const reqData = formDataObj as unknown as TasksCreateReq;\n    reqData.start_time = reqData.start_time\n      ? new Date(reqData.start_time).toISOString()\n      : undefined;\n    reqData.end_time = reqData.end_time\n      ? new Date(reqData.end_time).toISOString()\n      : undefined;\n\n    if (reqData.start_time && reqData.end_time) {\n      if (\n        new Date(reqData.start_time).getTime() >\n        new Date(reqData.end_time).getTime()\n      ) {\n        setEndtimeisInvalid(true);\n        setValidated(false);\n        setIsClick(false);\n        e.stopPropagation();\n        return;\n      }\n    }\n    reqData.labels = labelsValue.map((value, i) => {\n      return value.id;\n    });\n    reqData.priority =\n      (reqData.priority as unknown as string).length > 0\n        ? reqData.priority\n        : undefined;\n    reqData.state =\n      (reqData.state as unknown as string).length > 0\n        ? reqData.state\n        : undefined;\n\n    const result = await ApiTasksCreate(reqData);\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  useEffect(() => {\n    if (labelsData.length === 0) {\n      InitLabelsSliceData(dispatch);\n    }\n  }, []);\n\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          setIsClick(false);\n          setValidated(false);\n          setShow(true);\n        }}\n      >\n        Create\n      </Button>\n\n      <Offcanvas show={show} onHide={() => setShow(false)} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Create Task</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <Form onSubmit={onSummit} noValidate validated={validated}>\n            <Form.Group className=\"mb-3\" controlId=\"title\">\n              <Form.Label>Title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Title\"\n                name=\"title\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please input Task title.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"description\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Description\"\n                name=\"description\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"start_time\">\n              <Form.Label>StartTime</Form.Label>\n              <Form.Control\n                type=\"date\"\n                placeholder=\"StartTime\"\n                name=\"start_time\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"end_time\">\n              <Form.Label>EndTime</Form.Label>\n              <Form.Control\n                type=\"date\"\n                placeholder=\"EndTime\"\n                name=\"end_time\"\n                isInvalid={endtimeisInvalid}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                End Time is Invalid\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"priority\">\n              <Form.Label>Priority</Form.Label>\n              <Form.Select aria-label=\"priority\" name=\"priority\">\n                <option value=\"\">請選擇...</option>\n                <option value=\"1\">低</option>\n                <option value=\"2\">中</option>\n                <option value=\"3\">高</option>\n              </Form.Select>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"state\">\n              <Form.Label>State</Form.Label>\n              <Form.Select aria-label=\"state\" name=\"state\">\n                <option value=\"\">請選擇...</option>\n                <option value=\"1\">待處理</option>\n                <option value=\"2\">處理中</option>\n                <option value=\"3\">已完成</option>\n              </Form.Select>\n            </Form.Group>\n            <Form.Group controlId=\"labels\">\n              <Form.Label>Labels</Form.Label>\n              <Select\n                options={labelsData}\n                isMulti\n                closeMenuOnSelect={false}\n                getOptionLabel={(value) => value.name}\n                getOptionValue={(value) => value.id.toString()}\n                onChange={(value) => {\n                  const newData = Object.assign([], value);\n                  setLabelsValue(newData);\n                }}\n              />\n            </Form.Group>\n            <br />\n            {isClick ? (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n            ) : (\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            )}\n          </Form>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n};\n\nexport default CreateTask;\n","import { useState } from \"react\";\nimport { Button, Modal, Spinner } from \"react-bootstrap\";\nimport { ApiTasksDelete } from \"../../apis/tasks\";\nimport { CommonRes } from \"../../interface/common\";\n\ninterface IProp {\n  id: number;\n  onFinish?: (value: CommonRes<any>) => void;\n}\n\nconst DeleteTask = (props: IProp) => {\n  const { id, onFinish } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setIsClick(false);\n    setShow(true);\n  };\n\n  const handleDelete = async () => {\n    setIsClick(true);\n    const result = await ApiTasksDelete({ id: id });\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  return (\n    <>\n      <Button variant=\"danger\" onClick={handleShow}>\n        Delete\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header>\n          <Modal.Title>確認刪除</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>你確認要刪除這項紀錄嗎?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose} disabled={isClick}>\n            Close\n          </Button>\n          {isClick ? (\n            <Button variant=\"danger\" disabled>\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />\n              <span className=\"visually-hidden\">Loading...</span>\n            </Button>\n          ) : (\n            <Button variant=\"danger\" onClick={handleDelete}>\n              Delete\n            </Button>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default DeleteTask;\n","import { useEffect, useState } from \"react\";\nimport { Button, Form, Offcanvas, Spinner } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport { ApiTasksEdit } from \"../../apis/tasks\";\nimport { CommonRes } from \"../../interface/common\";\nimport { LabelsListRes } from \"../../interface/labels\";\nimport { TasksEditReq, TasksListRes } from \"../../interface/tasks\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hook\";\nimport { InitLabelsSliceData } from \"../../store/labels/labelsSlice\";\nimport { toDateString } from \"../../utils/dateFormat\";\n\ninterface IProp {\n  onFinish?: (value: CommonRes<any>) => void;\n  data: TasksListRes;\n}\n\nconst EditTask = (props: IProp) => {\n  const dispatch = useAppDispatch();\n  const labelsData = useAppSelector((state) => state.labels.value);\n  const { onFinish, data } = props;\n  const [show, setShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const [endtimeisInvalid, setEndtimeisInvalid] = useState(false);\n  const [labelsValue, setLabelsValue] = useState<LabelsListRes[]>([]);\n\n  const onSummit = async (e: any) => {\n    setIsClick(true);\n    setEndtimeisInvalid(false);\n\n    const form = e.currentTarget;\n    e.preventDefault();\n    setValidated(true);\n\n    if (form.checkValidity() === false) {\n      setIsClick(false);\n      e.stopPropagation();\n      return;\n    }\n\n    const formData = new FormData(e.target),\n      formDataObj = Object.fromEntries(formData.entries());\n\n    const reqData = formDataObj as unknown as TasksEditReq;\n\n    reqData.id = data.id;\n    reqData.start_time = reqData.start_time\n      ? new Date(reqData.start_time).toISOString()\n      : undefined;\n    reqData.end_time = reqData.end_time\n      ? new Date(reqData.end_time).toISOString()\n      : undefined;\n\n    if (reqData.start_time && reqData.end_time) {\n      if (\n        new Date(reqData.start_time).getTime() >\n        new Date(reqData.end_time).getTime()\n      ) {\n        setEndtimeisInvalid(true);\n        setValidated(false);\n        setIsClick(false);\n        e.stopPropagation();\n        return;\n      }\n    }\n    reqData.labels = labelsValue.map((value, i) => {\n      return value.id;\n    });\n    reqData.priority =\n      (reqData.priority as unknown as string).length > 0\n        ? reqData.priority\n        : undefined;\n    reqData.state =\n      (reqData.state as unknown as string).length > 0\n        ? reqData.state\n        : undefined;\n\n    const result = await ApiTasksEdit(reqData);\n    setShow(false);\n    if (onFinish) {\n      onFinish(result);\n    }\n  };\n\n  const InitLabelsData = () => {\n    const value: LabelsListRes[] = [];\n    data.labels?.forEach((k) => {\n      const result = labelsData.find((element) => element.id == k);\n      if (result) {\n        value.push(result);\n      }\n    });\n    return value;\n  };\n\n  useEffect(() => {\n    if (labelsData.length === 0) {\n      InitLabelsSliceData(dispatch);\n    }\n    setLabelsValue(InitLabelsData());\n  }, []);\n\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          setIsClick(false);\n          setValidated(false);\n          setShow(true);\n        }}\n      >\n        Edit\n      </Button>\n\n      <Offcanvas show={show} onHide={() => setShow(false)} placement=\"end\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Edit Task</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <Form onSubmit={onSummit} noValidate validated={validated}>\n            <Form.Group className=\"mb-3\" controlId=\"title\">\n              <Form.Label>Title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Title\"\n                name=\"title\"\n                defaultValue={data.title}\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please input Task title.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"description\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Description\"\n                name=\"description\"\n                defaultValue={data.description}\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"start_time\">\n              <Form.Label>StartTime</Form.Label>\n              <Form.Control\n                type=\"date\"\n                placeholder=\"StartTime\"\n                name=\"start_time\"\n                defaultValue={toDateString(data.start_time ?? \"\")}\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"end_time\">\n              <Form.Label>EndTime</Form.Label>\n              <Form.Control\n                type=\"date\"\n                placeholder=\"EndTime\"\n                name=\"end_time\"\n                isInvalid={endtimeisInvalid}\n                defaultValue={toDateString(data.end_time ?? \"\")}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                End Time is Invalid\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"priority\">\n              <Form.Label>Priority</Form.Label>\n              <Form.Select\n                aria-label=\"priority\"\n                name=\"priority\"\n                defaultValue={data.priority}\n              >\n                <option value=\"\">請選擇...</option>\n                <option value=\"1\">低</option>\n                <option value=\"2\">中</option>\n                <option value=\"3\">高</option>\n              </Form.Select>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"state\">\n              <Form.Label>State</Form.Label>\n              <Form.Select\n                aria-label=\"state\"\n                name=\"state\"\n                defaultValue={data.state}\n              >\n                <option value=\"\">請選擇...</option>\n                <option value=\"1\">待處理</option>\n                <option value=\"2\">處理中</option>\n                <option value=\"3\">已完成</option>\n              </Form.Select>\n            </Form.Group>\n            <Form.Group controlId=\"labels\">\n              <Form.Label>Labels</Form.Label>\n              <Select\n                options={labelsData}\n                isMulti\n                closeMenuOnSelect={false}\n                getOptionLabel={(value) => value.name}\n                getOptionValue={(value) => value.id.toString()}\n                onChange={(value) => {\n                  const newData = Object.assign([], value);\n                  setLabelsValue(newData);\n                }}\n                defaultValue={InitLabelsData()}\n              />\n            </Form.Group>\n            <br />\n            {isClick ? (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n            ) : (\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            )}\n          </Form>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n};\n\nexport default EditTask;\n","import { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport HomePage from \"../pages/home/HomePage\";\nimport LabelsPage from \"../pages/labels/LabelsPage\";\nimport TasksPage from \"../pages/tasks/TasksPage\";\n\nexport { PrivateRouteConfig as PublicRouteConfig };\nexport type { IRoute };\n\ninterface IRoute {\n  text: string;\n  path: string;\n  component: () => JSX.Element;\n  exact?: boolean;\n  icon?: IconDefinition;\n  routes?: IRoute[];\n}\n\nconst PrivateRouteConfig: IRoute[] = [\n  {\n    text: \"Home\",\n    path: \"/\",\n    exact: true,\n    component: HomePage,\n  },\n  {\n    text: \"Tasks\",\n    path: \"/tasks\",\n    component: TasksPage,\n  },\n  {\n    text: \"Labels\",\n    path: \"/labels\",\n    component: LabelsPage,\n  },\n];\n","import { useEffect, useState } from \"react\";\nimport { Container, Alert, Stack, Placeholder, Badge } from \"react-bootstrap\";\nimport BootstrapTable, {\n  ColumnDescription,\n  SortOrder,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport { ApiTasksList } from \"../../apis/tasks\";\nimport CustomSortCaret from \"../../components/custom-sort-caret/CustomSortCaret\";\nimport { TasksListRes } from \"../../interface/tasks\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hook\";\nimport { InitLabelsSliceData } from \"../../store/labels/labelsSlice\";\nimport { ResponseCode } from \"../../utils/const\";\nimport { toDateString } from \"../../utils/dateFormat\";\nimport CreateTask from \"./CreateTask\";\nimport DeleteTask from \"./DeleteTask\";\nimport EditTask from \"./EditTask\";\n\nconst TasksPage = () => {\n  const dispatch = useAppDispatch();\n  const labelsData = useAppSelector((state) => state.labels.value);\n  const [dataSourse, setDataSourse] = useState<TasksListRes[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertVariant, setAlertVariant] = useState(\"\");\n  const [alertText, setAlertText] = useState(\"\");\n\n  const GetTasksList = async () => {\n    setLoading(true);\n    const data = await ApiTasksList();\n    setDataSourse(data.content);\n    setLoading(false);\n  };\n\n  const columns: ColumnDescription[] = [\n    {\n      dataField: \"id\",\n      text: \"ID\",\n      sort: true,\n      style: { width: \"80px\" },\n      sortCaret: CustomSortCaret,\n    },\n    {\n      dataField: \"title\",\n      text: \"Title\",\n      sort: true,\n      sortCaret: CustomSortCaret,\n    },\n    {\n      dataField: \"description\",\n      text: \"Description\",\n    },\n    {\n      dataField: \"start_time\",\n      text: \"StartTime\",\n      style: { width: \"100px\" },\n      formatter: (cell, row, rowIndex) => {\n        return <>{toDateString(cell)}</>;\n      },\n    },\n    {\n      dataField: \"end_time\",\n      text: \"EndTime\",\n      style: { width: \"100px\" },\n      formatter: (cell, row, rowIndex) => {\n        return <>{toDateString(cell)}</>;\n      },\n    },\n    {\n      dataField: \"priority\",\n      text: \"Priority\",\n      sort: true,\n      sortCaret: CustomSortCaret,\n      align: \"center\",\n      style: { width: \"110px\" },\n      formatter: (cell, row, rowIndex) => {\n        let badgestr = \"\";\n        let badgecolor = \"\";\n        switch (cell) {\n          case 1:\n            badgestr = \"低\";\n            badgecolor = \"info\";\n            break;\n          case 2:\n            badgestr = \"中\";\n            badgecolor = \"primary\";\n            break;\n          case 3:\n            badgestr = \"高\";\n            badgecolor = \"danger\";\n            break;\n          default:\n            badgestr = \"未選擇\";\n            badgecolor = \"secondary\";\n            break;\n        }\n        return (\n          <h5 key={`badge-priority-${row.id}`}>\n            {cell ? (\n              <Badge pill bg={badgecolor}>\n                {badgestr}\n              </Badge>\n            ) : null}\n            &nbsp;\n          </h5>\n        );\n      },\n    },\n    {\n      dataField: \"state\",\n      text: \"State\",\n      sort: true,\n      sortCaret: CustomSortCaret,\n      align: \"center\",\n      style: { width: \"100px\" },\n      formatter: (cell, row, rowIndex) => {\n        let badgestr = \"\";\n        let badgecolor = \"\";\n        switch (cell) {\n          case 1:\n            badgestr = \"待處理\";\n            badgecolor = \"info\";\n            break;\n          case 2:\n            badgestr = \"處理中\";\n            badgecolor = \"warning\";\n            break;\n          case 3:\n            badgestr = \"已完成\";\n            badgecolor = \"success\";\n            break;\n          default:\n            badgestr = \"未選擇\";\n            badgecolor = \"secondary\";\n            break;\n        }\n        return (\n          <h5 key={`badge-state-${row.id}`}>\n            {cell ? (\n              <Badge pill bg={badgecolor}>\n                {badgestr}\n              </Badge>\n            ) : null}\n            &nbsp;\n          </h5>\n        );\n      },\n    },\n    {\n      dataField: \"labels\",\n      text: \"Labels\",\n      formatter: (cell, row, rowIndex) => {\n        return cell?.map((value: any, i: number) => (\n          <a key={`badge-${row.id}-${i}`}>\n            <Badge pill bg=\"primary\">\n              {(() => {\n                let name = \"\";\n                labelsData.forEach((k) => {\n                  if (k.id === value) {\n                    name = k.name;\n                  }\n                });\n                return name;\n              })()}\n            </Badge>\n            &nbsp;\n          </a>\n        ));\n      },\n    },\n    {\n      dataField: \"_action\",\n      text: \"Action\",\n      style: { width: \"160px\" },\n      align: \"center\",\n      formatter: (cell, row, rowIndex) => {\n        return (\n          <>\n            <EditTask\n              onFinish={(result) => {\n                setShowAlert(false);\n                if (result.code == ResponseCode.OK) {\n                  setAlertVariant(\"success\");\n                  setAlertText(\"修改成功\");\n                } else {\n                  setAlertVariant(\"danger\");\n                  setAlertText(\"修改失敗\");\n                }\n                setShowAlert(true);\n                setDataSourse([]);\n                GetTasksList();\n              }}\n              data={row}\n            />\n            &nbsp;\n            <DeleteTask\n              id={row.id}\n              onFinish={(result) => {\n                setShowAlert(false);\n                if (result.code == ResponseCode.OK) {\n                  setAlertVariant(\"danger\");\n                  setAlertText(\"刪除成功\");\n                } else {\n                  setAlertVariant(\"dark\");\n                  setAlertText(\"刪除失敗\");\n                }\n                setShowAlert(true);\n                setDataSourse([]);\n                GetTasksList();\n              }}\n            />\n          </>\n        );\n      },\n    },\n  ];\n\n  const defaultSorted: [{ dataField: any; order: SortOrder }] = [\n    {\n      dataField: \"id\",\n      order: \"asc\",\n    },\n  ];\n\n  useEffect(() => {\n    GetTasksList();\n\n    if (labelsData.length === 0) {\n      InitLabelsSliceData(dispatch);\n    }\n  }, []);\n\n  return (\n    <Container>\n      {showAlert ? (\n        <Alert key={\"alertkey\"} variant={alertVariant}>\n          {alertText}\n        </Alert>\n      ) : null}\n\n      <Stack direction=\"horizontal\" gap={2}>\n        <h2>Tasks</h2>\n        <div className=\"ms-auto\">\n          <CreateTask\n            onFinish={(result) => {\n              setShowAlert(false);\n              if (result.code == ResponseCode.OK) {\n                setAlertVariant(\"success\");\n                setAlertText(\"新增成功\");\n              } else {\n                setAlertVariant(\"danger\");\n                setAlertText(\"新增失敗\");\n              }\n              setShowAlert(true);\n              setDataSourse([]);\n              GetTasksList();\n            }}\n          />\n        </div>\n      </Stack>\n      <BootstrapTable\n        bootstrap4\n        keyField=\"id\"\n        data={dataSourse}\n        columns={columns}\n        noDataIndication={() => (\n          <Placeholder as=\"p\" animation=\"glow\">\n            <Placeholder xs={12} />\n            <Placeholder xs={12} />\n            <Placeholder xs={12} />\n          </Placeholder>\n        )}\n        pagination={paginationFactory({})}\n        defaultSorted={defaultSorted}\n      />\n    </Container>\n  );\n};\n\nexport default TasksPage;\n","import { faCopy } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Nav } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport SubMenu from \"../layout/sidebar/SubMenu\";\nimport { IRoute, PublicRouteConfig } from \"./config\";\n\nconst RouteCompoment = (props: IRoute) => {\n  return (\n    <Route\n      key={props.path}\n      path={props.path}\n      exact={props.exact}\n      children={<props.component />}\n    />\n  );\n};\n\nconst NavLinkCompoment = (props: IRoute) => {\n  return (\n    <Nav.Item key={\"item\" + props.path}>\n      <Nav.Link\n        as={Link}\n        to={props.path}\n        key={\"link\" + props.path}\n        className=\"sidebar-link\"\n      >\n        {props.icon ? (\n          <FontAwesomeIcon icon={props.icon} className=\"mr-2\" />\n        ) : null}\n        &nbsp;{props.text}\n      </Nav.Link>\n    </Nav.Item>\n  );\n};\n\nconst SubMenuCompoment = (props: IRoute) => {\n  return (\n    <SubMenu\n      title={props.text}\n      icon={props.icon ?? faCopy}\n      items={props.routes!}\n      key={\"submenu\" + props.text}\n    />\n  );\n};\n\nconst RouteContent = () => {\n  const subCompoment = (route: IRoute) => {\n    const elements: JSX.Element[] = [];\n    elements.push(RouteCompoment(route));\n    route.routes?.map((routesub, k) => {\n      elements.push(RouteCompoment(routesub));\n    });\n    return elements;\n  };\n\n  const totalCompoment = () => {\n    const elements: JSX.Element[] = [];\n    PublicRouteConfig.map((route, i) => {\n      const subElements = subCompoment(route);\n      elements.push(...subElements);\n    });\n\n    return elements;\n  };\n\n  return <Switch>{totalCompoment()}</Switch>;\n};\n\nconst RouteSideBar = () => {\n  const subCompoment = (route: IRoute) => {\n    const elements: JSX.Element[] = [];\n    if (route.routes) {\n      elements.push(SubMenuCompoment(route));\n    } else {\n      elements.push(NavLinkCompoment(route));\n    }\n    return elements;\n  };\n\n  const totalCompoment = () => {\n    const elements: JSX.Element[] = [];\n    PublicRouteConfig.map((route, i) => {\n      const subElements = subCompoment(route);\n      elements.push(...subElements);\n    });\n\n    return elements;\n  };\n\n  return <>{totalCompoment()}</>;\n};\n\nexport { RouteContent, RouteSideBar };\n","import { AxiosResponse } from \"axios\";\nimport { AuthLoginReq } from \"../interface/auth\";\nimport { CommonRes } from \"../interface/common\";\nimport { AxiosAuth as http } from \"../utils/http-common\";\n\nconst ApiAuthLogin = async (value: AuthLoginReq) => {\n  const response = await http.post<\n    AuthLoginReq,\n    AxiosResponse<CommonRes<string>>\n  >(\"/login\", value);\n  return response.data;\n};\n\nexport { ApiAuthLogin };\n","import { CommonRes } from \"../interface/common\";\nimport { UserGetNickNameRes } from \"../interface/user\";\nimport http from \"../utils/http-common\";\n\nconst ApiUserGetNickName = async () => {\n  const response = await http().get<CommonRes<UserGetNickNameRes>>(\n    \"/user/getNickName\"\n  );\n  return response.data;\n};\n\nexport { ApiUserGetNickName };\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ApiUserGetNickName } from \"../../apis/user\";\n\ninterface userState {\n  isLogin: boolean;\n  nickname: string;\n}\n\nconst initialState: userState = {\n  isLogin: false,\n  nickname: \"\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setLogin: (state, action: PayloadAction<boolean>) => {\n      state.isLogin = action.payload;\n    },\n    setNickName: (state, action: PayloadAction<string>) => {\n      state.nickname = action.payload;\n    },\n  },\n});\n\nconst InitUserNickNameData = async (dispatch: Function) => {\n  const data = await ApiUserGetNickName();\n  if (data.content && data.content.name) {\n    dispatch(setNickName(data.content.name));\n  }\n};\n\n// Action creators are generated for each case reducer function\nexport const { setLogin, setNickName } = userSlice.actions;\nexport { InitUserNickNameData };\nexport default userSlice.reducer;\n","import React, { useState } from \"react\";\nimport { Button, Form, Modal, Spinner } from \"react-bootstrap\";\nimport { ApiAuthLogin } from \"../../apis/auth\";\nimport { AuthLoginReq } from \"../../interface/auth\";\nimport { useAppDispatch } from \"../../store/hook\";\nimport { setLogin } from \"../../store/user/userSlice\";\nimport { ResponseCode } from \"../../utils/const\";\nimport { IsLogin } from \"../../utils/http-common\";\n\ninterface IProp {\n  onFinish?: (isLogin: boolean) => void;\n}\n\nconst LoginModal = (props: IProp) => {\n  const dispatch = useAppDispatch();\n  const { onFinish } = props;\n  const [modalShow, setModalShow] = useState(false);\n  const [isClick, setIsClick] = useState(false);\n  const [validated, setValidated] = useState(false);\n\n  const setHide = () => setModalShow(false);\n\n  const onSummit = async (e: any) => {\n    setIsClick(true);\n    setValidated(true);\n\n    const form = e.currentTarget;\n    e.preventDefault();\n\n    if (form.checkValidity() === false) {\n      setIsClick(false);\n      e.stopPropagation();\n      return;\n    }\n\n    const formData = new FormData(e.target),\n      formDataObj = Object.fromEntries(formData.entries());\n\n    const reqData = formDataObj as unknown as AuthLoginReq;\n\n    const result = await ApiAuthLogin(reqData);\n    let isLogin = false;\n    if (result.code == ResponseCode.OK) {\n      localStorage.setItem(\"token\", result.content);\n      isLogin = true;\n    }\n\n    setModalShow(false);\n    dispatch(setLogin(true));\n    if (onFinish) {\n      onFinish(isLogin);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"secondary\"\n        onClick={() => {\n          if (IsLogin()) {\n            dispatch(setLogin(true));\n          } else {\n            setModalShow(true);\n          }\n        }}\n      >\n        Login\n      </Button>\n\n      <Modal\n        show={modalShow}\n        onHide={setHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Form onSubmit={onSummit} noValidate validated={validated}>\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">Login</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                name=\"username\"\n                required\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                required\n              />\n            </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            {isClick ? (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"border\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n            ) : (\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            )}\n            <Button variant=\"secondary\" onClick={setHide}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default LoginModal;\n","import { useEffect, useState } from \"react\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hook\";\nimport {\n  InitUserNickNameData,\n  setLogin,\n  setNickName,\n} from \"../../store/user/userSlice\";\n\nconst NickNameText = () => {\n  const dispatch = useAppDispatch();\n  const nickName = useAppSelector((state) => state.user.nickname);\n\n  useEffect(() => {\n    if (nickName) {\n    } else {\n      InitUserNickNameData(dispatch);\n    }\n  }, []);\n\n  return (\n    <>\n      <Navbar.Text>Signed in as: {nickName}&nbsp;&nbsp;</Navbar.Text>\n      <Button\n        variant=\"secondary\"\n        onClick={() => {\n          localStorage.removeItem(\"token\");\n          dispatch(setLogin(false));\n          dispatch(setNickName(\"\"));\n        }}\n      >\n        LogOut\n      </Button>\n    </>\n  );\n};\n\nexport { NickNameText };\n","import { faAlignLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport LoginModal from \"../../components/login/LoginModal\";\nimport { NickNameText } from \"../../components/login/NickNameText\";\nimport { useAppSelector } from \"../../store/hook\";\n\ninterface IProps {\n  toggle: () => void;\n}\n\nconst NavbarCustom = (props: IProps) => {\n  const { toggle } = props;\n  const isLogin = useAppSelector((state) => state.user.isLogin);\n\n  return (\n    <Navbar\n      bg=\"light\"\n      className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\"\n      expand\n    >\n      <Navbar.Brand>\n        <Button variant=\"outline-info\" onClick={toggle}>\n          <FontAwesomeIcon icon={faAlignLeft} />\n        </Button>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse className=\"justify-content-end\">\n        {isLogin ? <NickNameText /> : <LoginModal />}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavbarCustom;\n","import classNames from \"classnames\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { RouteContent } from \"../../router/private-route\";\nimport NavbarCustom from \"./Navbar\";\n\ninterface IProps {\n  isOpen: boolean;\n  toggle: () => void;\n}\n\nconst Content = (props: IProps) => {\n  const { isOpen, toggle } = props;\n  return (\n    <Container fluid className={classNames(\"content\", { \"is-open\": isOpen })}>\n      <Row>\n        <Col>\n          <NavbarCustom toggle={toggle} />\n        </Col>\n      </Row>\n      <RouteContent />\n    </Container>\n  );\n};\n\nexport default Content;\n","import {\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport { Button, Nav } from \"react-bootstrap\";\nimport { RouteSideBar } from \"../../router/private-route\";\n\ninterface IProps {\n  isOpen: boolean;\n  toggle: () => void;\n}\n\nconst SideBar = (props: IProps) => {\n  const { isOpen, toggle } = props;\n  return (\n    <div className={classNames(\"sidebar\", { \"is-open\": isOpen })}>\n      <div className=\"sidebar-header\">\n        <Button\n          variant=\"link\"\n          onClick={toggle}\n          style={{ color: \"#fff\" }}\n          className=\"mt-4\"\n        >\n          <FontAwesomeIcon icon={faTimes} pull=\"right\" size=\"xs\" />\n        </Button>\n        <h3>Task Management</h3>\n      </div>\n\n      <Nav className=\"flex-column pt-2\">\n        <RouteSideBar />\n      </Nav>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\nimport Content from \"./content/Content\";\nimport SideBar from \"./sidebar/SideBar\";\nimport \"./MainPage.css\";\n\nconst MainPage = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(true);\n  const [previousWidth, setPreviousWidth] = useState(-1);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    const updateWidth = () => {\n      const width = window.innerWidth;\n      const widthLimit = 576;\n      const isMobile = width <= widthLimit;\n      const wasMobile = previousWidth <= widthLimit;\n\n      if (isMobile !== wasMobile) {\n        setIsOpen(!isMobile);\n      }\n      setPreviousWidth(width);\n    };\n\n    updateWidth();\n    window.addEventListener(\"resize\", updateWidth);\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  }, []);\n\n  return (\n    <HashRouter>\n      <div className=\"App wrapper\">\n        <SideBar toggle={toggle} isOpen={isOpen} />\n        <Content toggle={toggle} isOpen={isOpen} />\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default MainPage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport labelsReducer from \"./labels/labelsSlice\";\nimport userReducer from \"./user/userSlice\";\n\nconst store = configureStore({\n  reducer: {\n    labels: labelsReducer,\n    user: userReducer,\n  },\n});\n\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\n// import App from './router/public-route';\nimport App from \"./layout/MainPage\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}